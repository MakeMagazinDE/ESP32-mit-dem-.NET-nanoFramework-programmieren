<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnitsNet.Length</name>
    </assembly>
    <members>
        <member name="T:UnitsNet.Length">
            <inheritdoc />
            <summary>
                Many different units of length have been used around the world. The main units in modern use are U.S. customary units in the United States and the Metric system elsewhere. British Imperial units are still used for some purposes in the United Kingdom and some other countries. The metric system is sub-divided into SI and non-SI units.
            </summary>
        </member>
        <member name="F:UnitsNet.Length._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Length._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Unit">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Length.#ctor(System.Double,UnitsNet.Units.LengthUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Length.BaseUnit">
            <summary>
                The base unit of Duration, which is Second. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.MaxValue">
            <summary>
            Represents the largest possible value of Duration
            </summary>
        </member>
        <member name="P:UnitsNet.Length.MinValue">
            <summary>
            Represents the smallest possible value of Duration
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Second.
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Angstroms">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Angstrom"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.AstronomicalUnits">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.AstronomicalUnit"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Centimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Centimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Chains">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Chain"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.DataMiles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.DataMile"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Decameters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Decameter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Decimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Decimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.DtpPicas">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.DtpPica"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.DtpPoints">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.DtpPoint"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Fathoms">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Fathom"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Feet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Foot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Hands">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Hand"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Hectometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Hectometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Inches">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Inch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.KilolightYears">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.KilolightYear"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Kilometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Kilometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Kiloparsecs">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Kiloparsec"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.LightYears">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.LightYear"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.MegalightYears">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.MegalightYear"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Megaparsecs">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Megaparsec"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Meters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Meter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Microinches">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Microinch"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Micrometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Micrometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Mils">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Mil"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Miles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Mile"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Millimeters">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Millimeter"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Nanometers">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Nanometer"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.NauticalMiles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.NauticalMile"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Parsecs">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Parsec"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.PrinterPicas">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.PrinterPica"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.PrinterPoints">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.PrinterPoint"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Shackles">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Shackle"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.SolarRadiuses">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.SolarRadius"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Twips">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Twip"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.UsSurveyFeet">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.UsSurveyFoot"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Length.Yards">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.LengthUnit.Yard"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Length.FromAngstroms(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Angstrom"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromAstronomicalUnits(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.AstronomicalUnit"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromCentimeters(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Centimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromChains(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Chain"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromDataMiles(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.DataMile"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromDecameters(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Decameter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromDecimeters(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Decimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromDtpPicas(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.DtpPica"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromDtpPoints(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.DtpPoint"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromFathoms(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Fathom"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromFeet(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Foot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromHands(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Hand"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromHectometers(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Hectometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromInches(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Inch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromKilolightYears(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.KilolightYear"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromKilometers(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Kilometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromKiloparsecs(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Kiloparsec"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromLightYears(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.LightYear"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMegalightYears(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.MegalightYear"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMegaparsecs(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Megaparsec"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMeters(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Meter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMicroinches(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Microinch"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMicrometers(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Micrometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMils(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Mil"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMiles(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Mile"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromMillimeters(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Millimeter"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromNanometers(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Nanometer"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromNauticalMiles(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.NauticalMile"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromParsecs(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Parsec"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromPrinterPicas(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.PrinterPica"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromPrinterPoints(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.PrinterPoint"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromShackles(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Shackle"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromSolarRadiuses(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.SolarRadius"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromTwips(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Twip"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromUsSurveyFeet(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.UsSurveyFoot"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.FromYards(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Length"/> from <see cref="F:UnitsNet.Units.LengthUnit.Yard"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Length.From(System.Double,UnitsNet.Units.LengthUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.LengthUnit" /> to <see cref="T:UnitsNet.Length" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Length unit value.</returns>
        </member>
        <member name="M:UnitsNet.Length.As(UnitsNet.Units.LengthUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Length.ToUnit(UnitsNet.Units.LengthUnit)">
            <summary>
                Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Duration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Length.GetValueInBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
        <member name="F:UnitsNet.Units.LengthUnit.Angstrom">
            <summary>
                Angstrom is a metric unit of length equal to 1e-10 meter
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Angstrom</remarks>
        </member>
        <member name="F:UnitsNet.Units.LengthUnit.AstronomicalUnit">
            <summary>
                One Astronomical Unit is the distance from the solar system Star, the sun, to planet Earth.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Astronomical_unit</remarks>
        </member>
        <member name="F:UnitsNet.Units.LengthUnit.DataMile">
            <summary>
                In radar-related subjects and in JTIDS, a data mile is a unit of distance equal to 6000 feet (1.8288 kilometres or 0.987 nautical miles).
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Data_mile</remarks>
        </member>
        <member name="F:UnitsNet.Units.LengthUnit.LightYear">
            <summary>
                A Light Year (ly) is the distance that light travel during an Earth year, ie 365 days.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Light-year</remarks>
        </member>
        <member name="F:UnitsNet.Units.LengthUnit.Parsec">
            <summary>
                A parsec is defined as the distance at which one astronomical unit (AU) subtends an angle of one arcsecond.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Parsec</remarks>
        </member>
        <member name="F:UnitsNet.Units.LengthUnit.SolarRadius">
            <summary>
                Solar radius is a ratio unit to the radius of the solar system star, the sun.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Stellar_classification</remarks>
        </member>
    </members>
</doc>
